using cnzhnet.music_decrypt.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;

namespace cnzhnet.music_decrypt.Services
{
    /// <summary>
    /// 用于实现 QQ 音乐加密格式的音频解密.
    /// </summary>
    public class QmcAudioDecrypter : AudioDecrypter
    {
        private static readonly byte[] Ukey = new byte[] {
            0x77, 0x48, 0x32, 0x73, 0xDE, 0xF2, 0xC0, 0xC8, 0x95, 0xEC, 0x30, 0xB2, 0x51, 0xC3, 0xE1, 0xA0, 
            0x9E, 0xE6, 0x9D, 0xCF, 0xFA, 0x7F, 0x14, 0xD1, 0xCE, 0xB8, 0xDC, 0xC3, 0x4A, 0x67, 0x93, 0xD6, 
            0x28, 0xC2, 0x91, 0x70, 0xCA, 0x8D, 0xA2, 0xA4, 0xF0, 0x08, 0x61, 0x90, 0x7E, 0x6F, 0xA2, 0xE0, 
            0xEB, 0xAE, 0x3E, 0xB6, 0x67, 0xC7, 0x92, 0xF4, 0x91, 0xB5, 0xF6, 0x6C, 0x5E, 0x84, 0x40, 0xF7, 
            0xF3, 0x1B, 0x02, 0x7F, 0xD5, 0xAB, 0x41, 0x89, 0x28, 0xF4, 0x25, 0xCC, 0x52, 0x11, 0xAD, 0x43, 
            0x68, 0xA6, 0x41, 0x8B, 0x84, 0xB5, 0xFF, 0x2C, 0x92, 0x4A, 0x26, 0xD8, 0x47, 0x6A, 0x7C, 0x95,
            0x61, 0xCC, 0xE6, 0xCB, 0xBB, 0x3F, 0x47, 0x58, 0x89, 0x75, 0xC3, 0x75, 0xA1, 0xD9, 0xAF, 0xCC, 
            0x08, 0x73, 0x17, 0xDC, 0xAA, 0x9A, 0xA2, 0x16, 0x41, 0xD8, 0xA2, 0x06, 0xC6, 0x8B, 0xFC, 0x66, 
            0x34, 0x9F, 0xCF, 0x18, 0x23, 0xA0, 0x0A, 0x74, 0xE7, 0x2B, 0x27, 0x70, 0x92, 0xE9, 0xAF, 0x37, 
            0xE6, 0x8C, 0xA7, 0xBC, 0x62, 0x65, 0x9C, 0xC2, 0x08, 0xC9, 0x88, 0xB3, 0xF3, 0x43, 0xAC, 0x74, 
            0x2C, 0x0F, 0xD4, 0xAF, 0xA1, 0xC3, 0x01, 0x64, 0x95, 0x4E, 0x48, 0x9F, 0xF4, 0x35, 0x78, 0x95, 
            0x7A, 0x39, 0xD6, 0x6A, 0xA0, 0x6D, 0x40, 0xE8, 0x4F, 0xA8, 0xEF, 0x11, 0x1D, 0xF3, 0x1B, 0x3F, 
            0x3F, 0x07, 0xDD, 0x6F, 0x5B, 0x19, 0x30, 0x19, 0xFB, 0xEF, 0x0E, 0x37, 0xF0, 0x0E, 0xCD, 0x16, 
            0x49, 0xFE, 0x53, 0x47, 0x13, 0x1A, 0xBD, 0xA4, 0xF1, 0x40, 0x19, 0x60, 0x0E, 0xED, 0x68, 0x09, 
            0x06, 0x5F, 0x4D, 0xCF, 0x3D, 0x1A, 0xFE, 0x20, 0x77, 0xE4, 0xD9, 0xDA, 0xF9, 0xA4, 0x2B, 0x76,
            0x1C, 0x71, 0xDB, 0x00, 0xBC, 0xFD, 0xC,  0x6C, 0xA5, 0x47, 0xF7, 0xF6, 0x00, 0x79, 0x4A, 0x11
        };
        private static readonly byte[] magic_list = new byte[128] {
            0x1B, 0x1C, 0x1F, 0x24, 0x2B, 0x34, 0x3F, 0x4C, 0x5B, 0x6C, 0x7F, 0x94, 0xAB, 0xC4, 0xDF, 0xFC, 
            0x1B, 0x3C, 0x5F, 0x84, 0xAB, 0xD4, 0xFF, 0x2C, 0x5B, 0x8C, 0xBF, 0xF4, 0x2B, 0x64, 0x9F, 0xDC, 
            0x1B, 0x5C, 0x9F, 0xE4, 0x2B, 0x74, 0xBF, 0x0C, 0x5B, 0xAC, 0xFF, 0x54, 0xAB, 0x04, 0x5F, 0xBC, 
            0x1B, 0x7C, 0xDF, 0x44, 0xAB, 0x14, 0x7F, 0xEC, 0x5B, 0xCC, 0x3F, 0xB4, 0x2B, 0xA4, 0x1F, 0x9C, 
            0x1B, 0x9C, 0x1F, 0xA4, 0x2B, 0xB4, 0x3F, 0xCC, 0x5B, 0xEC, 0x7F, 0x14, 0xAB, 0x44, 0xDF, 0x7C, 
            0x1B, 0xBC, 0x5F, 0x04, 0xAB, 0x54, 0xFF, 0xAC, 0x5B, 0x0C, 0xBF, 0x74, 0x2B, 0xE4, 0x9F, 0x5C, 
            0x1B, 0xDC, 0x9F, 0x64, 0x2B, 0xF4, 0xBF, 0x8C, 0x5B, 0x2C, 0xFF, 0xD4, 0xAB, 0x84, 0x5F, 0x3C, 
            0x1B, 0xFC, 0xDF, 0xC4, 0xAB, 0x94, 0x7F, 0x6C, 0x5B, 0x4C, 0x3F, 0x34, 0x2B, 0x24, 0x1F, 0x1C
        };

        /// <summary>
        /// 创建一个 <see cref="QmcAudioDecrypter"/> 的对象实例.
        /// </summary>
        public QmcAudioDecrypter() : base()
        { }

        /// <summary>
        /// 执行解密任务.
        /// </summary>
        /// <param name="item">解密的音频项.</param>
        protected override void DoDecrypt(DecryptAudioItem item)
        {
            Exception tmpEx = null;
            try
            {
                byte[] key = FindKey(item);
                byte[] buffer = new byte[1024];
                int offset = 0, rlen = 0;
                Output.Position = 0;
                do
                {
                    rlen = Source.Read(buffer, 0, buffer.Length);
                    for (int i = 0; i < rlen; ++i)
                        buffer[i] ^= GetKeyValue(offset + i, key);
                    offset += rlen;
                    Output.Write(buffer, 0, rlen);
                }
                while (rlen > 0);
                Output.Flush();
                // 获取音频的格式.
                Output.Position = 0;
                Output.Read(buffer, 0, buffer.Length);
                item.OutputExt = GetAudioExt(buffer, 0);
                Output.Position = 0;
            }
            catch (Exception Ex)
            {
                if (UseMultithreaded)
                    OnCompleted(new CompletedEventArgs(false, item, Ex));
                else
                    tmpEx = Ex;
            }
            if (!UseMultithreaded && tmpEx != null)
                throw tmpEx;
        }
        /// <summary>
        /// 获取解密运算键值.
        /// </summary>
        /// <param name="v">字节在音频流中的位置.</param>
        /// <param name="key">密钥键数组.</param>
        /// <returns></returns>
        private byte GetKeyValue(int v, byte[] key)
        {
            if (v >= 0)
            {
                if (v > 0x7fff)
                    v %= 0x7fff;
            }
            else
            {
                v = 0;
            }
            return key[(v * v + 80923) % 256];
        }
        /// <summary>
        /// 在音频流中查找解密所需的密钥.
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        private byte[] FindKey(DecryptAudioItem item)
        {
            if (Path.GetExtension(item.File).ToLower() != ".mflac")
                return Ukey;

            byte[] key = new byte[256];
            byte[] buffer1 = new byte[128], buffer2 = new byte[128];
            Source.Read(buffer1, 0, buffer1.Length);
            Source.Read(buffer2, 0, buffer2.Length);
            bool isFound = false;
            do
            {
                isFound = BytesEqual(buffer1, 0, buffer2, 0, 128);
                if (isFound)
                    continue;

                Array.Copy(buffer2, 0, buffer1, 0, 128);
                if (Source.Read(buffer2, 0, buffer2.Length) < 1)
                    break;
            }
            while (!isFound);
            if (isFound)
            {
                for (int i = 0; i < 64; ++i)
                    key[magic_list[i]] = buffer2[i];
                return key;
            }
            return null;
        }
    }
}
